{"version":3,"sources":["components/Button.jsx","components/Display.jsx","main/Calculator.jsx","serviceWorker.js","index.js"],"names":["components_Button","props","classes","operation","double","triple","react_default","a","createElement","onClick","e","click","label","className","components_Display","value","initialState","displayValue","clearDisplay","values","current","Calculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","objectSpread","clearMemory","bind","assertThisInitialized","setOperation","addDigit","setState","equals","currentOperation","toConsumableArray","calc","n","includes","i","newValue","parseFloat","console","log","value1","value2","op","Component","Boolean","window","location","hostname","match","ReactDOM","render","Calculator_Calculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6164ff7e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Button.css'\r\n\r\nexport default props => {\r\n    let classes = 'button '\r\n    classes += props.operation ? 'operation' : ''\r\n    classes += props.double ? 'double' : ''\r\n    classes += props.triple ? 'triple' : ''\r\n    return (\r\n        <button \r\n            onClick={ e => props.click && props.click(props.label)}\r\n            className={classes}>\r\n            {props.label}\r\n        </button>\r\n    )\r\n}","import React from 'react'\r\nimport './Display.css'\r\n\r\nexport default props => \r\n    <div className=\"display\">{props.value}</div>","import React, { Component } from 'react'\r\nimport './Calculator.css'\r\n\r\nimport Button from '../components/Button'\r\nimport Display from '../components/Display' \r\n\r\nconst initialState = {\r\n    displayValue: '0',\r\n    clearDisplay: false,\r\n    operation: null,\r\n    values: [0, 0],\r\n    current: 0\r\n}\r\n\r\nexport default class Calculator extends Component {\r\n\r\n    state = { ...initialState }\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.clearMemory = this.clearMemory.bind(this)\r\n        this.setOperation = this.setOperation.bind(this)\r\n        this.addDigit = this.addDigit.bind(this)\r\n\r\n    }\r\n    clearMemory(){\r\n        this.setState({ ...initialState })\r\n    }\r\n\r\n    setOperation(operation){\r\n        if (this.state.current === 0){\r\n            this.setState({ operation, current: 1, clearDisplay: true })\r\n        } else {\r\n            const equals = operation === '='\r\n            const currentOperation = this.state.operation\r\n\r\n            const values = [ ...this.state.values ]\r\n            values[0] = this.calc(values[0], values[1], currentOperation)\r\n            values[1 ] = 0\r\n\r\n            this.setState({\r\n                displayValue: values[0],\r\n                operation: equals ? null : operation,\r\n                current: equals ? 0 : 1,\r\n                clearDisplay: !equals,\r\n                values\r\n            })\r\n        }\r\n    }\r\n\r\n    addDigit(n){\r\n        if (n === '.' && this.state.displayValue.includes('.')){\r\n            return\r\n        }\r\n\r\n        const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay\r\n        const currentValue = clearDisplay ? '' : this.state.displayValue\r\n        const displayValue = currentValue + n\r\n        this.setState({ displayValue, clearDisplay: false})\r\n\r\n        if( n !== '.'){\r\n            const i = this.state.current\r\n            const newValue = parseFloat(displayValue)\r\n            const values = [...this.state.values]\r\n            values[i] = newValue\r\n            this.setState({ values })\r\n            console.log(values)\r\n        }\r\n    }\r\n\r\n    calc(value1, value2 , op){\r\n        switch (op) {\r\n            case '+':\r\n                return value1 + value2\r\n            case '-':\r\n                return value1 - value2\r\n            case '*':\r\n                return value1 * value2\r\n            case '/':\r\n                return value1 + value2\r\n        \r\n            default:\r\n                console.log('deu ruim')\r\n                break;\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div className=\"calculator\">\r\n                <Display value={this.state.displayValue}/>\r\n                <Button label=\"AC\" click={this.clearMemory} triple />\r\n                <Button label=\"/\" click={this.setOperation} operation/>\r\n                <Button label=\"7\" click={this.addDigit}/>\r\n                <Button label=\"8\" click={this.addDigit}/>\r\n                <Button label=\"9\" click={this.addDigit}/>\r\n                <Button label=\"*\" click={this.setOperation} operation/>\r\n                <Button label=\"4\" click={this.addDigit}/>\r\n                <Button label=\"5\" click={this.addDigit}/>\r\n                <Button label=\"6\" click={this.addDigit}/>\r\n                <Button label=\"-\" click={this.setOperation} operation/>\r\n                <Button label=\"1\" click={this.addDigit}/>\r\n                <Button label=\"2\" click={this.addDigit}/>\r\n                <Button label=\"3\" click={this.addDigit}/>\r\n                <Button label=\"+\" click={this.setOperation} operation/>\r\n                <Button label=\"0\" click={this.addDigit} double/>\r\n                <Button label=\".\" click={this.addDigit}/>\r\n                <Button label=\"=\" click={this.setOperation} operation/>\r\n            </div>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './main/Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div>\n        <h1>Calculadora</h1>\n        <Calculator/>\n    </div>\n    \n    \n    \n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}